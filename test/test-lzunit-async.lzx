<!-- Copyright 2007 by Oliver Steele.  Available under the MIT License. -->
<canvas debug="true">
  <include href="../src/lzunit-async.lzx"/>
  <script src="../src/autorun-lz.js"/>

  <script><![CDATA[
    var watchpointHistory = [];
    function note(name) {
      watchpointHistory.push(name);
      //Debug.write('observed', name);
    }
    function checkWatchpointSequences() {
      var all = watchpointHistory.join(' '),
          padded = ' '+ all +' ',
          failed = false;
      Debug.write('Watchpoints occurred in the order', all);
      assertContiguousSequence('st1', 1, 2);
      assertContiguousSequence('st2', 1, 2, 3);
      assertContiguousSequence('s1', 1, 2, 3);
      assertContiguousSequence('s2', 1, 2, 3);
      assertContiguousSequence('sp', '1a', '1b', '2a', '2b', 3);
      failed || Debug.write('All watchpoint sequences matched.');
      function assertContiguousSequence(base) {
        var names = [];
        for (var i = 1; i < arguments.length; i++) {
          var name = base + '.' + arguments[i];
          if (padded.indexOf(' '+name+' ') < 0)
            return (failed++, Debug.error(name, 'did not occur'));
          names.push(name);
        }
        var seq = names.join(' ');
        //Debug.write('test', seq, all.indexOf(seq));
        padded.indexOf(' '+seq+' ') >= 0
          || (failed++, Debug.error(seq, 'did not occur in order'));
      }
    }
  ]]></script>

  <TestSuite>
    <handler name="onsuitefinish">
      note('done');
      checkWatchpointSequences();
    </handler>

    <AsyncTestCase>
      <method name="testSetTimeout" args="c">
        note('st1.1');
        setTimeout(c(function() {
          note('st1.2');
        }), 100);
      </method>

      <method name="testSetTimeout2" args="c">
        note('st2.1');
        setTimeout(c(function() {
          note('st2.2');
          setTimeout(c(function() {
            note('st2.3');
          }), 100);
        }), 100);
      </method>

      <method name="testSequentiallyWithNext" args="c">
        var next = sequentially(
          function() {
            note('s1.1');
            next();
          },
          function() {
            note('s1.2');
            next();
          },
          function() {
            note('s1.3');
            next();
          }
        )
      </method>

      <method name="testSequentiallyWithoutNext" args="c">
        var next = sequentially(
          function() {
            note('s2.1');
            next();
          },
          function() {
            note('s2.2');
            next();
          },
          function() {
            note('s2.3');
          }
        )
      </method>

      <method name="testSequentiallyParallel" args="c">
        var next = sequentially(
          [
            function() {note('sp.1a'); next()},
            function() {note('sp.1b') ;next()}
          ],
          [
            function() {note('sp.2a'); next()},
            function() {note('sp.2b') ;next()}
          ],
          function() {
            note('sp.3');
            next();
          }
        )
      </method>
    </AsyncTestCase>
  </TestSuite>
</canvas>
