<!-- Copyright 2008 by Oliver Steele.  Available under the MIT License. -->
<canvas debug="true">
  <include href="../src/library.lzx"/>

  <TestSuite>
    <TestCase>
      <method name="testEquals"><![CDATA[
        value(1).should.equal(1);
        value(1).should.not.equal(2);
      ]]></method>

      <method name="testArrayEquality"><![CDATA[
        value([1,2]).should.equal([1,2]);
        value([1,2]).should.not.equal([1]);
        value([1,2]).should.not.equal([1,3]);
        value([1,2]).should.not.equal([1,2,3]);
      ]]></method>

      <method name="testDateEquality"><![CDATA[
        var d1 = new Date,
            d2 = new Date(d1.getTime()),
            d3 = new Date(d1.getTime() + 60*1000);
        //value(d1).should.equal(d2);
        value(d1).should.not.equal(d3);
      ]]></method>

      <method name="testContains"><![CDATA[
        value([1,2]).should.contain(1);
        value([1,2]).should.not.contain(3);
      ]]></method>

      <method name="testObjectProperties"><![CDATA[
        value({a:1}).property('a').should.equal(1);
        value({a:1}).property('a').should.not.equal(2);
        value({a:1, b:2}).should.equal({a:1, b:2});
        value({a:1, b:2}).should.not.equal({a:1, b:3});
        value({a:1, b:2}).should.include({a:1});
        value({a:1, b:2}).should.not.include({a:2});
        value({a:1, b:2}).should.not.include({c:1});
      ]]></method>

      <method name="testInstanceOf"><![CDATA[
        value([]).should.be.an(Array);
        value(new Date).should.be.a(Date);
	value(function(){}).should.be.a(Function);
        value(new Date).should.not.be.an(Array);
        function C() {}
        value(new C).should.be.a(C);
      ]]></method>

      <method name="testTypeOf"><![CDATA[
        value(1).should.be.a('number');
        value('string').should.be.a('string');
        value(function(){}).should.be.a('function');
        value(null).should.be.a('null');
        value(true).should.be.a('boolean');
      ]]></method>

      <method name="testFailures"><![CDATA[
        withExpectedFailures(function() {

        value(1).should.equal(2);
        value({a:1}).property('a').should.equal(2);
        value({a:1, b:2}).property('b').should.equal(1);
        value({a:1}).property('b').should.equal(2);

        // Object
        value({a:1, b:2}).should.equal({a:1, b:1});
        value({a:1}).should.equal({a:1, b:2});
        //value({a:1, b:2}).should.equal({a:1});

        // Array
        value([1,3]).should.equal([1,2]);
        value([1,2]).should.equal([1]);
        value([1,2]).should.equal([1,2,3]);

        // Date
        var d1 = new Date, d2 = new Date(d1.getTime()+10);
        value(d1).should.equal(d2);

        });
      ]]></method>

      <method name="withExpectedFailures" args="fn"><![CDATA[
        var savedMethods = {},
            savedDebugError,
            failureCount = 0;
        saveMethods.call(this);
        fn.call(this);
        restoreMethods.call(this);
        if (failureCount == 0)
          this.fail("Expected failure was not signalled");

        function saveMethods() {
          savedDebugError = Debug.error;
          Debug.error = Debug.write;
          savedMethods.fail = this.fail;
          this.fail = function() {
            Debug.write('Expected failure was called:', arguments);
            failureCount += 1;
          }
          for (var methodName in this) {
            var method = this[methodName];
            if (methodName.indexOf('assert') == 0 && typeof method == 'function') {
              savedMethods[methodName] = method;
              this[methodName] = makeMethod(methodName, method);
            }
          }
        }
        function restoreMethods() {
          Debug.error = savedDebugError;
          for (var methodName in savedMethods)
            this[methodName] = savedMethods[methodName];
        }
        function makeMethod(methodName, method) {
          return function() {
            var count = failureCount;
            method.apply(this, arguments);
            if (count == failureCount)
              savedDebugError.call(Debug, methodName, 'did not call fail');
          }
        }
      ]]></method>
    </TestCase>
  </TestSuite>
</canvas>
