<!-- Copyright 2008 by Oliver Steele.  Available under the MIT License. -->
<library>
  <script src="autorun-lz.js"/>
  <class name="Timer" extends="node">
    <attribute name="trials" type="number" value="5"/>
    
    <method name="init"><![CDATA[
      super.init();
      LzBrowser.exec('window.receiveMessage = function(){(arguments.callee.queue=arguments.callee.queue||[]).push(Array.prototype.slice.call(arguments,0))}');
      LzBrowser.loadScript(Timer.javascriptIncludesBase+"jquery-1.2.1.min.js");
      LzBrowser.loadScript(Timer.lztestkitIncludesBase+"lztimer-browser.js");
      LzBrowser.loadStyleSheet(Timer.lztestkitIncludesBase+"lztimer.css");
      LzBrowser.exec.nextTime = new Date(new Date().getTime() + 20 * 1000);
      LzIdle.callOnIdle(new LzDelegate(this, 'runTimings'));
    ]]></method>

    <method name="runTimings"><![CDATA[
      var self = this,
          tests = [],
          trials = this.trials,
          trace = 0;
      for (var name in this)
        if (typeof(this[name]) == 'function' && name.indexOf('time') == 0) {
          for (var ix = 0; ix < trials; ix++)
            tests.push(name);
          }
      next();

      function next() {
        if (!tests.length) return;
        var name = tests.shift();
        runTiming(name);
      }
      function runTiming(name) {
        trace && Debug.write(name);
        var suspensor = Timer.suspend = function() {
          var st0 = new Date;
          trace && Debug.write(name, 'suspend');
          Timer.suspend = function() {
            Debug.error('suspend called twice');
          }
          return {
            resume: function() {
              1 && Debug.write(name, 'resume', new Date - st0);
              this.resume = function() { Debug.error('resume called twice') }
              Timer.suspend = suspensor;
              suspended += new Date - st0;
            }
          }
        }
        LzBrowser.exec('window.status="Running '+name+'"');
        self.setUp();
        var t0 = new Date,
            suspended = 0;
        var result = self[name](done);
        if (result != false) done();

        function done() {
          var elapsed = (new Date() - t0 - suspended) / 1000;
          trace && Debug.write(name, 'done', elapsed);
          //Debug.write(name, '->', elapsed);
          LzBrowser.exec('window.status="Elapsed time for '+name+': '+elapsed+'s"');
          LzBrowser.exec('window.receiveMessage("elapsed","'+name+'",'+elapsed+')');
          setTimeout(next, 10);
        }
      }
    ]]></method>

    <method name="setUp">
    </method>
  </class>

  <script><![CDATA[
    Timer.javascriptIncludesBase = "lztestkit/lib/";
    Timer.lztestkitIncludesBase = "lztestkit/includes/";

    LzBrowser.loadScript = function(src) {
      LzBrowser.exec('var s=document.createElement("script");s.type="text/javascript";s.src="'+src+'";document.body.appendChild(s)');
    }

    LzBrowser.loadStyleSheet = function(src) {
      LzBrowser.exec('var s=document.createElement("link");s.type="text/css";s.rel="stylesheet";s.href="'+src+'";document.body.appendChild(s)');
    }

    Debug.error("For accurate timings, run with debug=false");
  ]]></script>
</library>
